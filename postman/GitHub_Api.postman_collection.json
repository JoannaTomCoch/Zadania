{
	"info": {
		"_postman_id": "e0b244e3-631a-4649-ae8e-d2202b0ca053",
		"name": "GitHub_Api",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34930033"
	},
	"item": [
		{
			"name": "octocat",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const expectedStatusCode = 200;",
							"const expectedResponseStructure = {",
							"    login: 'string',",
							"    id: 'number',",
							"    node_id: 'string',",
							"    avatar_url: 'string',",
							"    gravatar_id: 'string',",
							"    url: 'string',",
							"    html_url: 'string',",
							"    followers_url: 'string',",
							"    following_url: 'string',",
							"    gists_url: 'string',",
							"    starred_url: 'string',",
							"    subscriptions_url: 'string',",
							"    organizations_url: 'string',",
							"    repos_url: 'string',",
							"    events_url: 'string',",
							"    received_events_url: 'string',",
							"    type: 'string',",
							"    site_admin: 'boolean',",
							"    name: 'string',",
							"    company: 'string',",
							"    blog: 'string',",
							"    location: 'string',",
							"    email: 'null', ",
							"    hireable: 'null', ",
							"    bio: 'null', ",
							"    twitter_username: 'null', ",
							"    public_repos: 'number',",
							"    public_gists: 'number',",
							"    followers: 'number',",
							"    following: 'number',",
							"    created_at: 'string',",
							"    updated_at: 'string'",
							"};",
							"",
							"// Response code verification with information if the code is different from 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.eql(expectedStatusCode);",
							"});",
							"",
							"// Verification of response structure and data types",
							"pm.test(\"Verify response structure and data types\", function () {",
							"    const jsonData = pm.response.json();",
							"",
							"    for (const key in expectedResponseStructure) {",
							"        if (expectedResponseStructure.hasOwnProperty(key)) {",
							"            pm.expect(jsonData).to.have.property(key);",
							"",
							"            // Sprawdzanie typÃ³w danych",
							"            const expectedType = expectedResponseStructure[key];",
							"            if (expectedType === 'string') {",
							"                pm.expect(jsonData[key]).to.be.a('string');",
							"            } else if (expectedType === 'number') {",
							"                pm.expect(jsonData[key]).to.be.a('number');",
							"            } else if (expectedType === 'boolean') {",
							"                pm.expect(jsonData[key]).to.be.a('boolean');",
							"            } else if (expectedType === 'null') {",
							"                pm.expect(jsonData[key]).to.be.oneOf([null, 'string', 'object']);",
							"            }",
							"        }",
							"    }",
							"});",
							"",
							"// Verification of the existence of the name parameter in the response, writing to the environment variable and information in case of failure",
							"pm.test(\"Check if 'name' exists and save to environment variable\", function () {",
							"    const jsonData = pm.response.json();",
							"    if (jsonData.hasOwnProperty(\"name\")) {",
							"        pm.environment.set(\"octocat_name\", jsonData.name);",
							"        console.log(`Saved 'name' to environment variable: ${jsonData.name}`);",
							"    } else {",
							"        console.log(\"The 'name' property does not exist in the response\");",
							"    }",
							"});",
							"",
							"// URL validation",
							"pm.test(\"Verify URLs are valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    const urlPattern = /^(https?|ftp):\\/\\/[^\\s/$.?#].[^\\s]*$/i;",
							"",
							"    const urls = [",
							"        jsonData.url,",
							"        jsonData.html_url,",
							"        jsonData.followers_url,",
							"        jsonData.following_url,",
							"        jsonData.gists_url,",
							"        jsonData.starred_url,",
							"        jsonData.subscriptions_url,",
							"        jsonData.organizations_url,",
							"        jsonData.repos_url,",
							"        jsonData.events_url,",
							"        jsonData.received_events_url,",
							"        jsonData.avatar_url,",
							"    ];",
							"",
							"    urls.forEach(url => {",
							"        pm.expect(url).to.match(urlPattern);",
							"    });",
							"});",
							"",
							"// Email validation",
							"pm.test(\"Verify email format if present\", function () {",
							"    const jsonData = pm.response.json();",
							"    if (jsonData.email) {",
							"        const emailPattern = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
							"        pm.expect(jsonData.email).to.match(emailPattern);",
							"    }",
							"});",
							"",
							"// Verifying that created_at is earlier than updated_at",
							"pm.test(\"Verify created_at is earlier than updated_at\", function () {",
							"    const jsonData = pm.response.json();",
							"    const createdAt = new Date(jsonData.created_at);",
							"    const updatedAt = new Date(jsonData.updated_at);",
							"",
							"    pm.expect(createdAt).to.be.below(updatedAt);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const userAgent = 'PostmanRuntime';\r",
							"\r",
							"//sets the User-Agent header required by GitHub\r",
							"pm.request.headers.add({key: 'User-Agent', value: userAgent});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/users/octocat",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"users",
						"octocat"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}